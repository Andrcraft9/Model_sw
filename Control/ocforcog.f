C=====================================================================
C(C) DIANSKY N.A. (dinar@inm.ras.ru)
C PROGRAM MODULE OF SEA SURFACE BOUNDARY DATA DEFINITION
C SEA SURFACE BOUNDARY CONDITION ON OCEAN GRID
      SUBROUTINE OCSURF(PATH2FLUX,SS_FILES,DAYS_IN_4YR,
     &           DAY_OF_4YR,MONTH_COUNTER,NEWMONTH,IGT,IGS)
	IMPLICIT NONE
C EXTERNAL TIME INTERPOLATION PARAMETERS
      REAL DAYS_IN_4YR(49), !DAY DISTRIBUTION IN 4-YEAR
     &     DAY_OF_4YR       !THE PRESENT DAY OF 4-YEAR PERIODICITY
      INTEGER  MONTH_COUNTER,       !THE PRESENT MONTH IN 4-YEAR
     &         NEWMONTH             !COMMAND TO READING DATA(>1-Y,0-NO)
C SETTING FILES WITH DATA PARAMETERS
      CHARACTER*(*) PATH2FLUX,SS_FILES(12)
C      CHARACTER FNAME*64

C SS_FILES(1) - FILE WITH SST ON OCEAN T-GRID OR ATMOSPHERIC GRID
C SS_FILES(2) - FILE WITH SSS ON OCEAN T-GRID
C SS_FILES(3) - FILE WITH X-WIND STRESS ON OCEAN H-GRID OR ATMOSPHERIC GRID
C SS_FILES(4) - FILE WITH Y-WIND STRESS ON OCEAN H-GRID OR ATMOSPHERIC GRID
C SS_FILES(5) - FILE WITH HEAT BALANCE FLUX ON SEA SURFACE ON ATMOSPHERIC GRID
C SS_FILES(6) - FILE WITH SHIRT WAVE RADIATION ON ATMOSPHERIC GRID
C SS_FILES(7) - FILE WITH PRECIPITATION-EVAPORATION ON ATMOSPHERIC GRID
C SS_FILES(8) - FILE WITH ICE MASK
C+++++++++++++++++TASK CONTROL PARAMETERS+++++++++++++++++++++++++++++++
      INTEGER IGT,IGS
C IGT = (1,2,3)- TYPE OF SEA SURFACE CONDITION FOR T;
C IGS = (1,2  )- TYPE OF SEA SURFACE CONDITION FOR S;
C        HERE 1- FIRST CONDITION, 2-THIRD CONDITION,
C             3- THIRD CONDITION WITH REFERENCE VALUE IS INTERPOLATED
C                FROM ATMOSPHERIC GRID
C IGWS=  1 - WIND STRESSES ARE READ FROM OCEAN GRID FILE
C     =  2 - WIND STRESSES ARE READ FROM ATMOSPHERIC GRID AND
C            INTERPOLATED ON OCEAN GRID
      INCLUDE '0COM.INC'
      INCLUDE '0CEAN.INC'

C SEA SURFACE ARRAY ON OCEAN GRID FOR INTERPOLATION FROM MONTH STEP
C TO MODEL TIME STEP IN DAY.
C HERE 3-MONTH LEVEL STORAGED FOR INTERPOLATION
      REAL TSS, SSS, TXO, TYO
      COMMON /MONTHINTP/
     &     TSS(NX,NY,3),      !SEA SURFACE TEMPERATURE [øC]
     &     SSS(NX,NY,3),      !SEA SURFACE SALINITY [PPT](DEVIATION FROM 35)
     &     TXO(NX,NY,3),      !ZONAL WIND STRESS[DIN/CM**2]
     &     TYO(NX,NY,3)       !MERIDIONAL WIND STRESS[DIN/CM**2]


c              IF (KSW_INP.EQ.3.OR.KSW_INP.EQ.4) THEN
      IF (IGT.LE.3) THEN
C READING AND TIME INTERPOLATION OF MONTHLY MEAN SST
      CALL OCMONINT(PATH2FLUX,SS_FILES(1),T0B,TSS,DAYS_IN_4YR,
     &              DAY_OF_4YR,MONTH_COUNTER,NEWMONTH,1)
      END IF

      IF (IGS.LE.3) THEN
C READING AND TIME INTERPOLATION OF MONTHLY MEAN SSS
C !!!!REMEMBER: 35 MUST BE SUBTRACTED FROM SALINITY DATA!!!!!
      CALL OCMONINT(PATH2FLUX,SS_FILES(2),S0B,SSS,DAYS_IN_4YR,
     &              DAY_OF_4YR,MONTH_COUNTER,NEWMONTH,1)
      END IF

      IF(MMD.NE.0) THEN
          CALL CYCLIZE(T0B,NX,NY,1,MMM,MM)
          CALL CYCLIZE(S0B,NX,NY,1,MMM,MM)
      END IF
C             ELSE: TEMPERATURE AND SALINITY ARE ZERO SETTING.
c              END IF

      RETURN
      END
C======================================================================
C SUBROUTINE FOR INTERPOLATION OF ATMOSPHERIC FORCING FROM MONTH MEAN
C DATA ON FIELD OF ASSIGNED STEP
C ALL DATA ARE SPECIFIED ON OCEAN GRID
      SUBROUTINE OCMONINT(PATH2DATA,FILENAME,AFORC1,AFORC3,DAYS_IN_4YR,
     &                 DAY_OF_4YR,MONTH_COUNTER,NEWMONTH,ITYPE_OF_GRID)
	IMPLICIT NONE
      INCLUDE '1LREC.INC'       !SET LONG OF UNIQUE RECL
      INCLUDE '0COM.INC'
C EXTERNAL PARAMETERS
      CHARACTER*(*) PATH2DATA,FILENAME !ATMOSPHERIC FORCING PATH TO/& FILE
      REAL DAYS_IN_4YR(49), !DAY DISTRIBUTION IN 4-YEAR
     &     DAY_OF_4YR       !THE PRESENT DAY OF 4-YEAR PERIODICITY
      REAL AFORC1(NX,NY),   !INTERPOLATED ATMOSPHERIC FORCING ARRAY
     &     AFORC3(NX,NY,3)  !ATMOSPHERIC FORCING ARRAY FOR 3 MONTHES
      INTEGER    MONTH_COUNTER,   !THE PRESENT MONTH IN 4-YEAR
     &        NEWMONTH,           !COMMAND TO READING DATA(>1-Y,0-NO)
     &        ITYPE_OF_GRID       !=1 FOR T-GRID,=2 FOR H-GRID
C WEIGHT MONTH COEFFICIENTS FOR IN-MONTH INTERPOLATION:
      REAL WMCPREVIOUS,WMCPRESENT,WMCNEXT
C MONTH NUMBERS FOR READING FROM FILENAME:
      INTEGER MONTHPREVIOUS,MONTHPRESENT,MONTHNEXT
      INTEGER IERR, M, N, KMPREVIOUS, KMPRESENT, KMNEXT

C INTERNAL PARAMETERS
      INTEGER MONTH            !THE PRESENT MONTH IN THE PRESENT YEAR

C   THE PRESENT MONTH OF YEAR:
c          MONTH   =  MONTH_COUNTER-12*INT(FLOAT(MONTH_COUNTER)/12.1)
           MONTH   =  MOD(MONTH_COUNTER,12)
       IF (MONTH.EQ.0) THEN
           MONTH   = 12
       ENDIF

           MONTHPREVIOUS=MONTH-1
       IF (MONTHPREVIOUS.EQ.0) THEN
           MONTHPREVIOUS = 12
       ENDIF

           MONTHPRESENT =MONTH

           MONTHNEXT    =MONTH+1
       IF (MONTHNEXT.EQ.13) THEN
           MONTHNEXT =   1
       ENDIF

C DEFINING WEIGHT COEFFICIENTS AND MONTH TO READ
      CALL MWCOEFR(DAYS_IN_4YR,DAY_OF_4YR,MONTH_COUNTER,
     &                   WMCPREVIOUS,WMCPRESENT,WMCNEXT,
     &                    KMPREVIOUS, KMPRESENT, KMNEXT)

      IF  (NEWMONTH.GE.1) THEN

      IF  (NEWMONTH.GE.2) THEN
C READ PREVIOUS AND PRESENT MONTH DATA
      WRITE(*,'(1X,A,2I3,A)')
     &  '  READ DATA FOR MONTHs',MONTHPREVIOUS,MONTHPRESENT,
     &  ' FOR INTERMONTH INTERPOLATION.'
C     WRITE(*,'(5X,A)') FILENAME
C SST AS EXTERNAL DATA
         IF (ITYPE_OF_GRID.EQ.1) THEN
C READING DATA ON T-GRID
         CALL RDSTD(PATH2DATA,FILENAME,MONTHPREVIOUS,
     &              AFORC3(1,1,KMPREVIOUS),LU,NX,NY,1,
     &              MMM,MM,NNN,NN,1,1,IERR)
         CALL RDSTD(PATH2DATA,FILENAME,MONTHPRESENT,
     &              AFORC3(1,1,KMPRESENT) ,LU,NX,NY,1,
     &              MMM,MM,NNN,NN,1,1,IERR)
         ELSE
C READING DATA ON H-GRID
         CALL RDSTD(PATH2DATA,FILENAME,MONTHPREVIOUS,
     &              AFORC3(1,1,KMPREVIOUS),LUH,NX,NY,1,
     &              MMM-1,MM,NNN-1,NN,1,1,IERR)
         CALL RDSTD(PATH2DATA,FILENAME,MONTHPRESENT,
     &              AFORC3(1,1,KMPRESENT), LUH,NX,NY,1,
     &              MMM-1,MM,NNN-1,NN,1,1,IERR)

         ENDIF
      END IF

      WRITE(*,'(1X,A,I3,A)')
     &  '  READ DATA FOR MONTH',MONTHNEXT,
     &  ' FOR INTERMONTH INTERPOLATION.'

C READ NEXT MONTH DATA
         IF (ITYPE_OF_GRID.EQ.1) THEN
C READING DATA ON T-GRID
         CALL RDSTD(PATH2DATA,FILENAME,MONTHNEXT,
     &              AFORC3(1,1,KMNEXT),LU,NX,NY,1,
     &              MMM,MM,NNN,NN,1,1,IERR)
         ELSE
C READING DATA ON H-GRID
         CALL RDSTD(PATH2DATA,FILENAME,MONTHNEXT,
     &              AFORC3(1,1,KMNEXT),LUH,NX,NY,1,
     &              MMM-1,MM,NNN-1,NN,1,1,IERR)
         ENDIF

      END IF

         DO N = 2,NN
      DO M = 2,MM
       AFORC1(M,N)= WMCPREVIOUS*AFORC3(M,N,KMPREVIOUS)+
     +              WMCPRESENT *AFORC3(M,N,KMPRESENT)+
     +              WMCNEXT    *AFORC3(M,N,KMNEXT)
      ENDDO
         ENDDO

      RETURN
      END
C======================================================================
C SUBROUTINE FOR INTERPOLATION OF VALUES OF T&S FOR LIQUID WALLS
C FROM MONTH MEAN  DATA ON FIELD OF ASSIGNED STEP
      SUBROUTINE LQWVINT(PATH2DATA,DAYS_IN_4YR,
     &                   DAY_OF_4YR,MONTH_COUNTER,NEWMONTH,FLQBW)
	IMPLICIT NONE
      INCLUDE '1LREC.INC'       !SET LONG OF UNIQUE RECL
      INCLUDE '0COM.INC'
      INCLUDE '1LQBC.INC'
C HERE 3-MONTH LEVEL STORAGED FOR INTERPOLATION LIQUID WALL VALUES
      REAL               SLQBWMON, TLQBWMON
      COMMON /MONINTLIQB/TLQBWMON(NUMB_OF_LQP_MAX,NZ,3), !TEM FOR 3 MONTHES
     &                   SLQBWMON(NUMB_OF_LQP_MAX,NZ,3)  !SAL FOR 3 MONTHES

C EXTERNAL PARAMETERS
      CHARACTER*(*) PATH2DATA, !PATH TO DATA
     &              FLQBW(2)   !NAMES OF FILES WITH LIQUID BOUNDARY T&S
      CHARACTER(4096) FNAME
      INTEGER IERR, K

      REAL DAYS_IN_4YR(49), !DAY DISTRIBUTION IN 4-YEAR
     &     DAY_OF_4YR       !THE PRESENT DAY OF 4-YEAR PERIODICITY
      INTEGER    MONTH_COUNTER,   !THE PRESENT MONTH IN 4-YEAR
     &        NEWMONTH            !COMMAND TO READING DATA(>1-Y,0-NO)
C WEIGHT MONTH COEFFICIENTS FOR IN-MONTH INTERPOLATION:
      REAL WMCPREVIOUS,WMCPRESENT,WMCNEXT
C MONTH NUMBERS FOR READING FROM FILENAME:
      INTEGER MONTHPREVIOUS,MONTHPRESENT,MONTHNEXT,LB

C INTERNAL PARAMETERS
      INTEGER MONTH            !THE PRESENT MONTH IN THE PRESENT YEAR
      INTEGER KMPREVIOUS, KMPRESENT, KMNEXT
C   THE PRESENT MONTH OF YEAR:
C          MONTH   =  MONTH_COUNTER-12*INT(FLOAT(MONTH_COUNTER)/12.1)
           MONTH   =  MOD(MONTH_COUNTER,12)
       IF (MONTH.EQ.0) THEN
           MONTH   = 12
       ENDIF

           MONTHPREVIOUS=MONTH-1
       IF (MONTHPREVIOUS.EQ.0) THEN
           MONTHPREVIOUS = 12
       ENDIF

           MONTHPRESENT =MONTH

           MONTHNEXT    =MONTH+1
       IF (MONTHNEXT.EQ.13) THEN
           MONTHNEXT =   1
       ENDIF

C DEFINING WEIGHT COEFFICIENTS AND MONTH TO READ
      CALL MWCOEFR(DAYS_IN_4YR,DAY_OF_4YR,MONTH_COUNTER,
     &                   WMCPREVIOUS,WMCPRESENT,WMCNEXT,
     &                    KMPREVIOUS, KMPRESENT, KMNEXT)

      IF  (NEWMONTH.GE.1) THEN

      IF  (NEWMONTH.GE.2) THEN
C READ PREVIOUS AND PRESENT MONTH DATA
      WRITE(*,'(1X,A,2I3,A)')
     &  '  READ LQW DATA FOR MONTHs',MONTHPREVIOUS,MONTHPRESENT,
     &  ' FOR INTERMONTH INTERPOLATION.'

C FULL FILE NAME WITH LIQUID BOUNDARY TEMPERATURE
      CALL FULFNAME(FNAME,PATH2DATA,FLQBW(1),IERR)
      WRITE(*,'(5X,A)') FNAME(1:LEN_TRIM (FNAME))
      OPEN(40,FILE=FNAME,STATUS='OLD',ACCESS='DIRECT',
     &          FORM='UNFORMATTED',RECL=NUMB_OF_LQP*NZ*LRECL)
      READ(40,REC=MONTHPREVIOUS)
     & ((TLQBWMON(LB,K,KMPREVIOUS),LB=1,NUMB_OF_LQP),K=1,NZ)
      READ(40,REC=MONTHPRESENT)
     & ((TLQBWMON(LB,K,KMPRESENT) ,LB=1,NUMB_OF_LQP),K=1,NZ)
      CLOSE(40)

C FULL FILE NAME WITH LIQUID BOUNDARY SALINITY
      CALL FULFNAME(FNAME,PATH2DATA,FLQBW(2),IERR)
      WRITE(*,'(5X,A)') FNAME(1:LEN_TRIM (FNAME))
      OPEN(40,FILE=FNAME,STATUS='OLD',ACCESS='DIRECT',
     &          FORM='UNFORMATTED',RECL=NUMB_OF_LQP*NZ*LRECL)
      READ(40,REC=MONTHPREVIOUS)
     & ((SLQBWMON(LB,K,KMPREVIOUS),LB=1,NUMB_OF_LQP),K=1,NZ)
      READ(40,REC=MONTHPRESENT)
     & ((SLQBWMON(LB,K,KMPRESENT) ,LB=1,NUMB_OF_LQP),K=1,NZ)
      CLOSE(40)

      END IF

      WRITE(*,'(1X,A,I3,A)')
     &  '  READ LQW DATA FOR MONTH',MONTHNEXT,
     &  ' FOR INTERMONTH INTERPOLATION.'

C READ NEXT MONTH DATA

C FULL FILE NAME WITH LIQUID BOUNDARY TEMPERATURE
      CALL FULFNAME(FNAME,PATH2DATA,FLQBW(1),IERR)
      WRITE(*,'(5X,A)') FNAME(1:LEN_TRIM (FNAME))
      OPEN(40,FILE=FNAME,STATUS='OLD',ACCESS='DIRECT',
     &      FORM='UNFORMATTED',RECL=NUMB_OF_LQP*NZ*LRECL)
      READ(40,REC=MONTHNEXT)
     & ((TLQBWMON(LB,K,KMNEXT),LB=1,NUMB_OF_LQP),K=1,NZ)
      CLOSE(40)

C FULL FILE NAME WITH LIQUID BOUNDARY SALINITY
      CALL FULFNAME(FNAME,PATH2DATA,FLQBW(2),IERR)
      WRITE(*,'(5X,A)') FNAME(1:LEN_TRIM (FNAME))
      OPEN(40,FILE=FNAME,STATUS='OLD',ACCESS='DIRECT',
     &      FORM='UNFORMATTED',RECL=NUMB_OF_LQP*NZ*LRECL)
      READ(40,REC=MONTHNEXT)
     & ((SLQBWMON(LB,K,KMNEXT),LB=1,NUMB_OF_LQP),K=1,NZ)
      CLOSE(40)

      END IF

            DO K = 1,NZ
         DO LB=1,NUMB_OF_LQP
      TLQBW(LB,K)= WMCPREVIOUS*TLQBWMON(LB,K,KMPREVIOUS)+
     +             WMCPRESENT *TLQBWMON(LB,K,KMPRESENT)+
     +             WMCNEXT    *TLQBWMON(LB,K,KMNEXT)
      SLQBW(LB,K)= WMCPREVIOUS*SLQBWMON(LB,K,KMPREVIOUS)+
     +             WMCPRESENT *SLQBWMON(LB,K,KMPRESENT)+
     +             WMCNEXT    *SLQBWMON(LB,K,KMNEXT)

         ENDDO
            ENDDO

      RETURN
      END
C======================================================================
C SUBROUTINE FOR DEFINING WEIGHT COEFFICIENTS AND MONTH TO READ
      SUBROUTINE MWCOEFR(DAYS_IN_4YR,DAY_OF_4YR,MONTH_COUNTER,
     &                   WMCPREVIOUS,WMCPRESENT,WMCNEXT,
     &                    KMPREVIOUS, KMPRESENT, KMNEXT)
	IMPLICIT NONE
C EXTERNAL PARAMETERS
      REAL DAYS_IN_4YR(49), !DAY DISTRIBUTION IN 4-YEAR
     &     DAY_OF_4YR,      !THE PRESENT DAY OF 4-YEAR PERIODICITY
     &     WMCPREVIOUS,WMCPRESENT,WMCNEXT
C ABOVE: WEIGHT MONTH COEFFICIENTS FOR IN-MONTH INTERPOLATION,
C        THEIR SEQUENS IS THE SAME AS THEIR NAME IF ONLY FOR
C        FIRST CASE (FOR FAST COMPUTING)

      INTEGER MONTH_COUNTER,           !THE PRESENT MONTH IN 4-YEAR
     &       KMPREVIOUS,KMPRESENT,KMNEXT,  !MONTH LEVELS
C INTERNAL PARAMETERS:
     &         KAFORC,          !CYCLE OF INTERPOLATION
     &         MONTH,           !THE PRESENT MONTH IN THE PRESENT YEAR
     &         KMONH            !HELP VARIABLE
      REAL DAY_OF_MONTH,DAYS_IN_HALFMONTH    !HELP VARIABLES

      IF (MONTH_COUNTER.GT.48.OR.MONTH_COUNTER.LT.1) THEN
      WRITE(*,*)'  ERROR IN SUBROUTINE MWCOEFR!!!'
      WRITE(*,'(A,I5,A)')
     &        '  MONTH COUNTER =',MONTH_COUNTER,' < 1; OR > 48'
      STOP 1
      ENDIF

C   THE PRESENT MONTH OF YEAR:
C      MONTH = MONTH_COUNTER-12*INT(FLOAT(MONTH_COUNTER)/12.1)
           MONTH   =  MOD(MONTH_COUNTER,12)
       IF (MONTH.EQ.0) THEN
           MONTH   = 12
       ENDIF

C   THE PRESENT DAY OF MONTH:
       DAY_OF_MONTH =DAY_OF_4YR-DAYS_IN_4YR(MONTH_COUNTER)
       DAYS_IN_HALFMONTH =    ( DAYS_IN_4YR(MONTH_COUNTER+1)
     -                         -DAYS_IN_4YR(MONTH_COUNTER  ))/2.0

       IF(DAY_OF_MONTH.LE.DAYS_IN_HALFMONTH) THEN
       WMCPREVIOUS=-0.75*DAY_OF_MONTH/DAYS_IN_HALFMONTH+0.5
       WMCPRESENT =      DAY_OF_MONTH/DAYS_IN_HALFMONTH+0.5
       WMCNEXT    =-0.25*DAY_OF_MONTH/DAYS_IN_HALFMONTH
       ELSE
       WMCPREVIOUS= 0.25*DAY_OF_MONTH/DAYS_IN_HALFMONTH-0.5
       WMCPRESENT =     -DAY_OF_MONTH/DAYS_IN_HALFMONTH+2.5
       WMCNEXT    = 0.75*DAY_OF_MONTH/DAYS_IN_HALFMONTH-1.0
       ENDIF

           KMPREVIOUS=1
           KMPRESENT =2
           KMNEXT    =3

       KAFORC=MOD(MONTH,3)

       IF (KAFORC.EQ.2) THEN
       KMONH      = KMPREVIOUS
       KMPREVIOUS = KMPRESENT
       KMPRESENT  = KMNEXT
       KMNEXT     = KMONH
       ENDIF

       IF (KAFORC.EQ.0) THEN
       KMONH      = KMNEXT
       KMNEXT     = KMPRESENT
       KMPRESENT  = KMPREVIOUS
       KMPREVIOUS = KMONH
       ENDIF

       RETURN
       END
